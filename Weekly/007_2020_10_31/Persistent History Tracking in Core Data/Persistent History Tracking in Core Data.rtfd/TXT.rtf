{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\froman\fcharset0 Times-Bold;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red255\green255\blue255;\red0\green0\blue0;
\red15\green104\blue160;\red63\green110\blue116;\red92\green38\blue153;\red38\green71\blue75;\red0\green116\blue0;
\red0\green116\blue0;\red196\green26\blue22;\red46\green13\blue110;}
{\*\expandedcolortbl;;\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0;
\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c24700\c43100\c45600;\csgenericrgb\c35900\c14900\c60100;\csgenericrgb\c14900\c27800\c29400;\csgenericrgb\c0\c45600\c0\c35000;
\csgenericrgb\c0\c45600\c0;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c18100\c5200\c43100;}
\paperw11900\paperh16840\margl1440\margr1440\vieww37900\viewh18720\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://medium.com/better-programming/persistent-history-tracking-in-core-data-f44ab39691ed"}}{\fldrslt 
\f0\fs36 \cf0 https://medium.com/better-programming/persistent-history-tracking-in-core-data-f44ab39691ed}}
\f0\fs36 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs24 \cf0 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b\fs44 \cf0 Gi\uc0\u7899 i thi\u7879 u
\f0\b0\fs36 \
Ch\'fang ta \uc0\u273 \'e3 bi\u7871 t App v\'e0 Extension c\'f3 th\u7875  share chung Data (b\u7857 ng Core Data). \
B\'e0i vi\uc0\u7871 t gi\u7899 i thi\u7879 u v\u7873  history tracking v\'e0 c\'e1ch share history gi\u7919 a c\'e1c app target (th\u432 \u7901 ng l\'e0 App v\'e0 c\'e1c Extensions).\
M\uc0\u7909 c \u273 \'edch l\'e0 \u273 \u7875  n\u7871 u c\'f3 1 change data x\u7843 y ra \u7903  Extension ch\u7859 ng h\u7841 n th\'ec App c\'f3 th\u7875  \u273 \u432 \u7907 c notify v\'e0 update change trong App.\
\

\f1\b\fs44 1. Persistent History Tracking
\f0\b0\fs36 \
Khi b\uc0\u7853 t Persistent History Tracking, app s\u7869  ghi l\u7841 i transaction cho b\u7845 t c\u7913  thay \u273 \u7893 i data n\'e0o trong Core Data store.\
D\'f9 cho thay \uc0\u273 \u7893 i n\'e0y \u273 \u7871 n t\u7915  Extension, Background Context hay t\u7915  Main App, t\u7845 t c\u7843  \u273 \u7873 u \u273 \u432 \u7907 c ghi v\'e0o history.\
M\uc0\u7895 i app target c\'f3 th\u7875  fetch c\'e1c history t\u7915  n\'e0y t\u7915  1 ng\'e0y cho tr\u432 \u7899 c v\'e0 merge c\'e1c thay \u273 \u7893 i n\'e0y v\'e0o local store c\u7911 a ch\'fang. \
Sau khi merge ta c\'f3 th\uc0\u7875  update l\u7841 i merged date \u273 \u7875  l\u7847 n sau ch\u7881  c\u7847 n fetch t\u7915  ng\'e0y \u273 \'f3 tr\u7903  \u273 i.
\fs24 \
\

\f1\b\fs44 2. B\uc0\u7853 t Persistent History Tracking\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b0\fs36 \cf0 Ch\'fang ta s\uc0\u7869  b\u7853 t HistoryTrackingKey v\'e0 StoreRemoteChangeNotificationPostOptionKey\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b\fs44 \cf0 \
\pard\tx791\pardeftab791\pardirnatural\partightenfactor0

\f2\b0\fs32 \cf2 \cb3 let\cf4  \cf5 storeDescription\cf4  = NSPersistentStoreDescription()\
\cf6 storeDescription\cf4 .setOption(\cf2 true\cf4  \cf2 as\cf4  \cf7 NSNumber\cf4 , forKey: NSPersistentHistoryTrackingKey)\
\cf6 storeDescription\cf4 .setOption(\cf2 true\cf4  \cf2 as\cf4  \cf7 NSNumber\cf4 , forKey: NSPersistentStoreRemoteChangeNotificationPostOptionKey)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b\fs44 \cf0 \cb1 \
3. L\uc0\u7855 ng nghe \
\
\pard\tx791\pardeftab791\pardirnatural\partightenfactor0

\f2\b0\fs32 \cf2 \cb3 public\cf4  \cf2 func\cf4  \cf5 startObserving\cf4 () \{\
    \cf7 NotificationCenter\cf4 .default.addObserver(\
       \cf2 self\cf4 , \
       selector: \cf2 #selector\cf4 (\cf8 processStoreRemoteChanges\cf4 ), \
       name: .NSPersistentStoreRemoteChange, \
       object: persistentContainer.persistentStoreCoordinator)\
\}\
\
\pard\tx791\pardeftab791\pardirnatural\partightenfactor0
\cf9 ///\cf4  \cf10 Process persistent history to merge changes from other coordinators.\cf4 \
\pard\tx791\pardeftab791\pardirnatural\partightenfactor0
\cf2 @objc\cf4  \cf2 private\cf4  \cf2 func\cf4  \cf5 processStoreRemoteChanges\cf4 (\cf2 _\cf4  notification: \cf7 Notification\cf4 ) \{\
    historyQueue.addOperation \{ [\cf2 weak\cf4  \cf2 self\cf4 ] \cf2 in\cf4 \
        \cf2 self\cf4 ?.processPersistentHistory()\
    \}\
\}\
\
\cf2 @objc\cf4  \cf2 private\cf4  \cf2 func\cf4  \cf5 processPersistentHistory\cf4 () \{\
    \cf2 let\cf4  context = persistentContainer.newBackgroundContext()\
    context.performAndWait \{\
        \cf2 do\cf4  \{\
            \cf9 ///\cf4  \cf10 .. Perform merge\cf4 \
            \cf9 ///\cf4  \cf10 .. Perform clean up\cf4 \
        \} \cf2 catch\cf4  \{\
            print(\cf11 "Persistent History Tracking failed with error \cf4 \\(error)\cf11 "\cf4 )\
        \}\
    \}\
\}\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b\fs44 \cf0 \cb1 4. Merge Transactions v\'e0o App Target\
\
\pard\tx791\pardeftab791\pardirnatural\partightenfactor0

\f2\b0\fs32 \cf2 \cb3 func\cf4  \cf5 merge\cf4 () \cf2 throws\cf4  \{\
    \cf2 let\cf4  fromDate = userDefaults.lastHistoryTransactionTimestamp(for: currentTarget) ?? .distantPast\
    \cf2 let\cf4  fetcher = PersistentHistoryFetcher(context: backgroundContext, fromDate: fromDate)\
    \cf2 let\cf4  history = \cf2 try\cf4  fetcher.fetch()\
\
    \cf2 guard\cf4  \cf12 !\cf4 history.isEmpty \cf2 else\cf4  \{\
        \cf12 print\cf4 (\cf11 "No history transactions found to merge for target \cf4 \\(currentTarget)\cf11 "\cf4 )\
        \cf2 return\cf4 \
    \}\
\
    \cf12 print\cf4 (\cf11 "Merging \cf4 \\(history.count)\cf11  persistent history transactions for target \cf4 \\(currentTarget)\cf11 "\cf4 )\
\
    history.merge(into: backgroundContext)\
\
    viewContext.perform \{\
        history.merge(into: \cf2 self\cf4 .viewContext)\
    \}\
\
    \cf2 guard\cf4  \cf2 let\cf4  lastTimestamp = history.last?.timestamp \cf2 else\cf4  \{ \cf2 return\cf4  \}\
    userDefaults.updateLastHistoryTransactionTimestamp(for: currentTarget, to: lastTimestamp)\
\}\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b\fs44 \cf0 \cb1 4. Transactions Fetcher\
\
\pard\tx791\pardeftab791\pardirnatural\partightenfactor0

\f2\b0\fs32 \cf2 \cb3 func\cf4  \cf5 fetch\cf4 () \cf2 throws\cf4  -> [\cf7 NSPersistentHistoryTransaction\cf4 ] \{\
    \cf2 let\cf4  fetchRequest = \cf8 createFetchRequest\cf4 ()\
\
    \cf2 guard\cf4  \cf2 let\cf4  historyResult = \cf2 try\cf4  context.execute(fetchRequest) \cf2 as\cf4 ? \cf7 NSPersistentHistoryResult\cf4 ,\
          \cf2 let\cf4  history = historyResult.result \cf2 as\cf4 ? [\cf7 NSPersistentHistoryTransaction\cf4 ]\
    \cf2 else\cf4  \{\
        \cf2 throw\cf4  \cf7 Error\cf4 .historyTransactionConvertionFailed\
    \}\
\
    \cf2 return\cf4  history\
\}\
\
\cf2 func\cf4  \cf5 createFetchRequest\cf4 () -> \cf7 NSPersistentHistoryChangeRequest\cf4  \{\
    \cf2 let\cf4  historyFetchRequest = NSPersistentHistoryChangeRequest\
        .fetchHistory(after: fromDate)\
\
    \cf2 if\cf4  \cf2 let\cf4  fetchRequest = NSPersistentHistoryTransaction.fetchRequest \{\
        \cf2 var\cf4  predicates: [\cf7 NSPredicate\cf4 ] = []\
\
        \cf2 if\cf4  \cf2 let\cf4  transactionAuthor = context.transactionAuthor \{\
            \cf9 ///\cf4  \cf10 Only look at transactions created by other targets.\cf4 \
            predicates.append(\cf7 NSPredicate\cf4 (format: \cf11 "%K != %@"\cf4 , \cf2 #keyPath\cf4 (NSPersistentHistoryTransaction.author), transactionAuthor))\
        \}\
        \cf2 if\cf4  \cf2 let\cf4  contextName = context.name \{\
            \cf9 ///\cf4  \cf10 Only look at transactions not from our current context.\cf4 \
            predicates.append(\cf7 NSPredicate\cf4 (format: \cf11 "%K != %@"\cf4 , \cf2 #keyPath\cf4 (NSPersistentHistoryTransaction.contextName), contextName))\
        \}\
\
        fetchRequest.predicate = \cf7 NSCompoundPredicate\cf4 (type: .and, subpredicates: predicates)\
        historyFetchRequest.fetchRequest = fetchRequest\
    \}\
\
    \cf2 return\cf4  historyFetchRequest\
\}\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b\fs44 \cf0 \cb1 5. Clean up History\
\
\pard\tx791\pardeftab791\pardirnatural\partightenfactor0

\f2\b0\fs32 \cf9 \cb3 ///\cf4  \cf10 Cleans up the persistent history by deleting the transactions that have been merged into each target.\cf4 \
\pard\tx791\pardeftab791\pardirnatural\partightenfactor0
\cf2 func\cf4  \cf5 clean\cf4 () \cf2 throws\cf4  \{\
    \cf2 guard\cf4  \cf2 let\cf4  timestamp = userDefaults.lastCommonTransactionTimestamp(in: targets) \cf2 else\cf4  \{\
        \cf12 print\cf4 (\cf11 "Cancelling deletions as there is no common transaction timestamp"\cf4 )\
        \cf2 return\cf4 \
    \}\
\
    \cf2 let\cf4  deleteHistoryRequest = NSPersistentHistoryChangeRequest.deleteHistory(before: timestamp)\
    \cf12 print\cf4 (\cf11 "Deleting persistent history using common timestamp \cf4 \\(timestamp)\cf11 "\cf4 )\
    \cf2 try\cf4  context.execute(deleteHistoryRequest)\
\
    targets.forEach \{ target \cf2 in\cf4 \
        \cf9 ///\cf4  \cf10 Reset the dates as we would otherwise end up in an infinite loop.\cf4 \
        userDefaults.updateLastHistoryTransactionTimestamp(for: target, to: \cf2 nil\cf4 )\
    \}\
\}\
}