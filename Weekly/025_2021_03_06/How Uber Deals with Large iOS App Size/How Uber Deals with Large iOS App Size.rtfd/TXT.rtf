{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\froman\fcharset0 Times-Bold;\f2\fswiss\fcharset0 Helvetica;
\f3\froman\fcharset0 Times-Italic;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red31\green83\blue237;
\red26\green26\blue26;\red14\green14\blue14;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c15294\c43137\c94510;
\cssrgb\c13333\c13333\c13333;\cssrgb\c6667\c6667\c6667;}
\paperw11900\paperh16840\margl1440\margr1440\vieww33100\viewh17880\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://eng.uber.com/how-uber-deals-with-large-ios-app-size/"}}{\fldrslt 
\f0\fs36 \cf0 https://eng.uber.com/how-uber-deals-with-large-ios-app-size/}}
\f0\fs36 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs24 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b\fs44 \cf0 Introduction
\f0\b0\fs36 \
In this blog, Uber iOS team introduce how to reduce app size by applying advanced compiler techniques.\
\

\f1\b\fs44 Default build pipeline of Uber Rider app\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b0\fs36 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\fs24 \cf0 {{\NeXTGraphic default_work_flow.png \width22060 \height7480 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs36 \cf0 \
\
\
At first, compiling all source files in a module to produce object file (.o). It also compiles Objective-C files separately into object files. All object files, including pre-built binaries, are linked with system linker into final binary.\
Each module is compiled using whole-optimization in Swift compiler. -Osize flag is used to produce a size-optimized binary.\
A few more techniques and config can be used to reduce size app: avoiding large value types (e.g, struct or enum), restricting access control level to lowest, avoiding excessive use of generics, using final attributes, remove dead code and resources.\
In this blog, Uber suggest opportunities for cross-module optimization.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b\fs44 \cf0 Optimize at binary level\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b0\fs36 \cf0 Over 75% of app binary is machine instructions and a vast amount of machine instruction sequences repeat frequently.\
So, we can subsitute a sequence with a shorter sequence, typically a single call or unconditional branch instruction to a single occurence of the pattern.
\f1\b\fs44 \

\f0\b0\fs36 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\fs24 \cf0 {{\NeXTGraphic transformed.png \width22400 \height10760 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs36 \cf0 \
\
In above example two instructions call be replaced with a call instruction to newly created outlined_function.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f3\i \cf0 Machine-code sequences repeat frequently, and the frequency of repetition follows the power-law curve. 
\f0\i0 (Explanation of this is compliated, so we can skip).\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b\fs44 \cf0 Causes of instruction-sequence repetition.
\f3\i\b0\fs36 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\i0 \cf0 1. High level language and runtime features related to reference counting and memory allocation are common causes of the most frequently repeated patterns.\
2. The generous use of novel, high-level language features and their corresponding code generation contribute to certain, very long and undesirable repeated patterns.\
Example:\
	
\f3\i Generic functions
\f0\i0  and 
\f3\i Closure specialization
\f0\i0 .\
	O(n2) code blow-up from 
\f3\i try expressions
\f0\i0 .\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b\fs44 \cf0 \
Advanced compiler techniques\
\pard\pardeftab720\partightenfactor0

\f3\i\b0\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
machine-code outlining
\f0\i0  is a transformation available in LLVM, and most recent Swift compiler versions enable it if the code is compiled for size.\'a0\
However, in default pipeline, each module is converted into machine code. If we perform machine-code outlining at each module level, there will still be replicas present across modules\
and we\'92ll miss the opportunity to find replicas that span across multi modules.\
\cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b\fs44 \cf0 new iOS build pipeline
\f0\b0\fs36 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\fs24 \cf0 {{\NeXTGraphic new_pipeline.png \width22400 \height11000 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
New pipeline produce LLVM-IR for each module, it then, combines all LLVM-IR files into one large IR file using llvm-link. \
Then, it perform all LLVM-IR level optimizations on this single IR file using opt. It then feed the optimized IR to llc, which lowers the IR to target machine code.\
\pard\pardeftab720\partightenfactor0

\f1\b\fs44 \cf2 \
\pard\pardeftab720\sl760\partightenfactor0
\cf6 Squeezing More Size with Repeated Machine Outlining\cf2 \
\pard\pardeftab720\partightenfactor0

\f0\b0\fs36 \cf2 Machine outlining can be repeated multi rounds to reduce more size.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 {{\NeXTGraphic repeated.png \width22400 \height5460 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl760\partightenfactor0

\f1\b\fs44 \cf6 Build time
\f0\b0\fs36 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 Since build time significantly increases when compared to default pipeline, we do not perform these optimizations at debug build but only on test and release builds.\
So, it doesn\'92t impact developer productivity.}