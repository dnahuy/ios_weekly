{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\froman\fcharset0 Times-Bold;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red255\green255\blue255;\red0\green0\blue0;
\red11\green79\blue121;\red15\green104\blue160;\red92\green38\blue153;\red63\green110\blue116;\red0\green0\blue0;
\red255\green255\blue255;\red31\green31\blue31;\red28\green0\blue207;}
{\*\expandedcolortbl;;\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0;
\csgenericrgb\c4314\c30980\c47451;\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c35900\c14900\c60100;\csgenericrgb\c24700\c43100\c45600;\cssrgb\c0\c0\c0;
\cssrgb\c100000\c100000\c100000;\cssrgb\c16078\c16078\c16078;\csgenericrgb\c11000\c0\c81000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww33100\viewh17880\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://medium.com/geekculture/why-swift-reference-types-are-bad-for-app-startup-time-90fbb25237fc"}}{\fldrslt 
\f0\fs36 \cf0 https://medium.com/geekculture/why-swift-reference-types-are-bad-for-app-startup-time-90fbb25237fc}}
\f0\fs36 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs24 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b\fs44 \cf0 Introduction
\f0\b0\fs36 \
This blog explain how reference types make app startup time longer and what can be done to improve.\
\

\f1\b\fs44 Dlyd
\f0\b0\fs36 \
App starts when Mach-O executable is loaded by dlyd. Dyld loads all dependent framework, including any system frameworks.\
Binary metadata describes types in your source code. This metadata allows for dynamic runtime features but also make binary size large.\
\pard\tx791\pardeftab791\pardirnatural\partightenfactor0

\f2\fs32 \cf2 \cb3 \
struct\cf4  \cf5 ObjcClass\cf4  \{\
  \cf2 let\cf4  \cf6 isa\cf4 : \cf7 UInt64\cf4 \
  \cf2 let\cf4  \cf6 superclass\cf4 : \cf7 UInt64\cf4 \
  \cf2 let\cf4  \cf6 cache\cf4 : \cf7 UInt64\cf4 \
  \cf2 let\cf4  \cf6 mask\cf4 : \cf7 UInt32\cf4 \
  \cf2 let\cf4  \cf6 occupied\cf4 : \cf7 UInt32\cf4 \
  \cf2 let\cf4  \cf6 taggedData\cf4 : \cf7 UInt64\cf4 \
\}
\f0\fs36 \cf0 \cb1 \
\
Each UInt64 is the address of another piece of metadata. However, each time app is launched, it\'92s placed in in a different location of memory because of address space layout randomization (ASLR).\
So the address hardcoded into app binary is now wrong. Dlyd is responsible for correcting this by rebasing all pointers to take into account the unique start location.\
This process is done for every pointer in your executable and all depedent frameworks.\
So reducing it results in a smaller app binary and a faster start time.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b\fs44 \cf0 Composition and Inheritance
\f0\b0\fs36  \
\pard\tx791\pardeftab791\pardirnatural\partightenfactor0
\cf0 Inheritance will generate a lot of metadata, but we maybe represent the same idea with value types. Replace object inheritance with value composition, such as enums with associated values or generic types.\
\

\f2\fs32 \cf2 \cb3 struct\cf4  \cf5 Section\cf4 <\cf5 SectionType\cf4 : \cf7 Decodable\cf4 >: \cf7 Decodable\cf4  \{\
  \cf2 let\cf4  \cf6 name\cf4 : \cf7 String\cf4 \
  \cf2 let\cf4  \cf6 id\cf4 : \cf7 Int\cf4 \
  \cf2 let\cf4  \cf6 type\cf4 : \cf8 SectionType\cf4 \
\}\
\
\cf2 struct\cf4  \cf5 TextRow\cf4 : \cf7 Decodable\cf4  \{\
  \cf2 let\cf4  \cf6 title\cf4 : \cf7 String\cf4 \
  \cf2 let\cf4  \cf6 subtitle\cf4 : \cf7 String\cf4 \
\}\
\
\cf2 struct\cf4  \cf5 ImageRow\cf4 : \cf7 Decodable\cf4  \{\
  \cf2 let\cf4  \cf6 imageURL\cf4 : \cf7 URL\cf4 \
  \cf2 let\cf4  \cf6 accessibilityLabel\cf4 : \cf7 String\cf4 \
\}\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b\fs44 \cf0 \cb1 Categories in Swift
\f0\b0\fs36 \
\pard\tx791\pardeftab791\pardirnatural\partightenfactor0
\cf0 Using extension in Swift, we can still generate category binary metadata if we declare an extension that uses an Objective C function.\
\

\f2\fs32 \cf2 \cb3 extension\cf4  \cf7 TestClass\cf4  \{\
  \cf2 @objc\cf4 \
  \cf2 func\cf4  \cf6 foo\cf4 () \{ \}\
 \
  \cf2 override\cf4  \cf2 func\cf4  \cf6 bar\cf4 () \{ \}\
\}\

\f0\fs36 \cf0 \cb1 \
Both functions are included in binary metadata, but since they are declared in an extension, they are referred by a synthesized category on TestClass.\
Move these functions into the original class declaration to avoid the extra overhead of category metadata being included in binary.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b\fs44 \cf0 Many properties
\f0\b0\fs36 \
\pard\pardeftab720\partightenfactor0
\cf9 \cb10 \expnd0\expndtw0\kerning0
Properties in a Swift class each add 3 to 6 rebasing fixups, depending on if the class is\'a0final.\
\kerning1\expnd0\expndtw0 \
\pard\tx791\pardeftab791\pardirnatural\partightenfactor0

\f2\fs32 \cf2 \cb3 final\cf4  \cf2 class\cf4  \cf5 TestClass\cf4  \{\
  \cf2 var\cf4  \cf6 property1\cf4 : \cf7 Int\cf4  = \cf12 0\cf4 \
  \cf2 var\cf4  \cf6 property2\cf4 : \cf7 Int\cf4  = \cf12 0\cf4 \
  ...\
  \cf2 var\cf4  \cf6 property20\cf4 : \cf7 Int\cf4  = \cf12 0\cf4 \
\}\

\f0\fs36 \cf9 \cb10 \
\pard\pardeftab720\sl640\partightenfactor0
\cf9 \expnd0\expndtw0\kerning0
Converting it to be backed by a struct reduces the number of rebase fixups by 60%\
\
\pard\tx791\pardeftab791\pardirnatural\partightenfactor0

\f2\fs32 \cf2 \cb3 \kerning1\expnd0\expndtw0 final\cf4  \cf2 class\cf4  \cf5 TestClass\cf4  \{\
  \cf2 struct\cf4  \cf5 Content\cf4  \{\
    \cf2 var\cf4  \cf6 property1\cf4 : \cf7 Int\cf4  = \cf12 0\cf4 \
    \cf2 var\cf4  \cf6 property2\cf4 : \cf7 Int\cf4  = \cf12 0\cf4 \
    ...\
    \cf2 var\cf4  \cf6 property20\cf4 : \cf7 Int\cf4  = \cf12 0\cf4 \
  \}\
 \
  \cf2 var\cf4  \cf6 content\cf4 : \cf8 Content\cf4  = .\cf8 init\cf4 ()\
\}}