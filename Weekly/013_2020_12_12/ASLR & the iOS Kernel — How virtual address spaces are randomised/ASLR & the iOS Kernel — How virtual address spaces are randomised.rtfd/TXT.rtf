{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\froman\fcharset0 Times-Bold;\f2\froman\fcharset0 Times-BoldItalic;
\f3\fswiss\fcharset0 Helvetica;\f4\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red31\green31\blue31;\red239\green239\blue239;}
{\*\expandedcolortbl;;\cssrgb\c16078\c16078\c16078;\cssrgb\c94902\c94902\c94902;}
\paperw11900\paperh16840\margl1440\margr1440\vieww33400\viewh18280\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://bellis1000.medium.com/aslr-the-ios-kernel-how-virtual-address-spaces-are-randomised-d76d14dc7ebb"}}{\fldrslt 
\f0\fs36 \cf0 https://bellis1000.medium.com/aslr-the-ios-kernel-how-virtual-address-spaces-are-randomised-d76d14dc7ebb}}
\f0\fs36 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs24 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b\fs44 \cf0 Gi\uc0\u7899 i thi\u7879 u
\f0\b0\fs36 \
B\'e0i vi\uc0\u7871 t m\'f4 t\u7843  v\u7873  k\u7929  thu\u7853 t ASLR (Address Space Layout Randomisation) v\'e0 c\'e1ch n\'f3 \u273 \u432 \u7907 c \'e1p d\u7909 ng trong iOS Kernel.\
\

\f1\b\fs44 ASLR
\f0\b0\fs36 \
K\uc0\u7929  thu\u7853 t n\'e0y s\u7869  l\'e0m t\u259 ng th\'eam \u273 \u7897  kh\'f3 n\u7871 u 1 hacker mu\u7889 n locate specific parts c\u7911 a 1 program tr\'ean memory b\u7857 ng c\'e1ch random memory address space c\u7911 a program m\u7895 i l\u7847 n n\'f3 \u273 \u432 \u7907 c launch.\
C\'e1ch m\'e0 ASLR th\uc0\u7921 c hi\u7879 n l\'e0 sliding 
\f2\i\b to\'e0n b\uc0\u7897 
\f0\i0\b0  process address space theo 1 con s\uc0\u7889  n\'e0o \u273 \'f3 (t\u432 \u417 ng t\u7921  nh\u432  offset).\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f3\fs24 \cf0 {{\NeXTGraphic 1_poVLblqLoGLLFgP--O2f0A (1).png \width24000 \height11080 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs36 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
Nh\uc0\u432  h\'ecnh minh h\u7885 a, process A \u273 \u432 \u7907 c load v\'e0o memory t\u7841 i static virtual address - 0x10000. Process A s\u7869  lu\'f4n lu\'f4n \u273 \u432 \u7907 c load v\'e0o memory t\u7841 i address \u273 \'f3 v\'ec n\'f3 kh\'f4ng c\'f3 ASLR.\
Process B, m\uc0\u7863 t kh\'e1c, \u273 \u432 \u7907 c load v\'e0o memory t\u7841 i v\u7883  tr\'ed 0x14c00. Base address n\'e0y \u273 \u432 \u7907 c dynamically calculated m\u7895 i l\u7847 n process B \u273 \u432 \u7907 c launch. \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b\fs44 \cf0 iOS Kernel
\f0\b0\fs36 \
Tr\'ean iOS, k\uc0\u7929  thu\u7853 t n\'e0y \u273 \u432 \u7907 c \'e1p d\u7909 ng cho c\u7843  Kernel process v\'e0 User-land process.\
iOS Kernel d\uc0\u7921 a tr\'ean XNU v\'e0 XNU l\'e0 open source. Tuy nhi\'ean, nh\u7919 ng \u273 o\u7841 n code new, iOS-specific m\'e0 Apple th\'eam v\'e0o XNU th\'ec l\u7841 i l\'e0 closed source. M\u7863 c d\'f9 v\u7853 y, refer \u273 \u7871 n XNU source code c\u361 ng gi\'fap ta ph\u7847 n n\'e0o hi\u7875 u \u273 \u432 \u7907 c high-level c\u7911 a v\'e0i ph\u7847 n trong iOS Kernel code base.\
H\'e0m 
\f4\fs31\fsmilli15750 \cf2 \cb3 \expnd0\expndtw0\kerning0
load_machfile()
\f0\fs36 \cf0 \cb1 \kerning1\expnd0\expndtw0  trong 
\f4\fs31\fsmilli15750 \cf2 \cb3 \expnd0\expndtw0\kerning0
bsd/kern/mach_loader.c
\f0\fs36 \cf0 \cb1 \kerning1\expnd0\expndtw0  trong XNU s\uc0\u7869  ch\u7883 u tr\'e1ch nhi\u7879 m parsing Mach-O file (l\'e0 file executable d\'f9ng tr\'ean iOS) v\'e0 setup new task, loading v\'e0o memory, v.v.. M\u7895 i l\u7847 n b\u7841 n m\u7903  1 app ho\u7863 c run 1 binary tr\'ean iPhone, h\'e0m n\'e0y s\u7869  \u273 \u432 \u7907 c g\u7885 i trong kernel.\
ASLR slide cho new process s\uc0\u7869  \u273 \u432 \u7907 c generate ra trong h\'e0m n\'e0y.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f3\fs24 \cf0 {{\NeXTGraphic 1_b78UDZZEquYNmy8g23Ym9A.png \width14000 \height6920 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs36 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
Nh\uc0\u432  \u273 o\u7841 n code ta c\'f3 th\u7875  th\u7845 y, th\u7921 c t\u7871  c\'f3 2 gi\'e1 tr\u7883  ASLR slide \u273 \u432 \u7907 c gen ra, 1 c\'e1i cho process v\'e0 1 c\'e1i cho dlyd.\
Trong b\'e0i blog n\'e0y, t\'e1c gi\uc0\u7843  c\'f3 minh h\u7885 a 1 k\u7929  thu\u7853 t d\u7921 a tr\'ean reverse engineering \u273 \u7875  disable ASLR. D\u297  nhi\'ean l\'e0 vi\u7879 c th\u7917  nghi\u7879 m ph\u7843 i \u273 \u432 \u7907 c ti\u7871 n h\'e0nh tr\'ean iPhone \u273 \'e3 jailbreak.\
T\'e1c gi\uc0\u7843  \u273 \'e3 thay \u273 \u7893 i Assembly Code ch\u7883 u tr\'e1ch nhi\u7879 m cho vi\u7879 c generate ASLR slide.}